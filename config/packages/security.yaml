security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        # Utilise 'auto' pour déterminer automatiquement l'algorithme (par exemple bcrypt ou argon2i)
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                # redirection after successful login
                default_target_path: app_home
                enable_csrf: true
            logout:
                path: app_logout
                # redirection after logout
                target: app_login

            # Vous pouvez activer d'autres méthodes d'authentification si besoin.
            # switch_user: true

    # Contrôle d'accès global
    access_control:
        # Exemple d'accès restreint, décommenter et adapter selon vos besoins
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # Dans l'environnement de test, on réduit le coût pour accélérer les tests
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4          # Plus faible pour bcrypt
                time_cost: 3     # Plus faible pour argon
                memory_cost: 10  # Plus faible pour argon
